plugins {
   id "com.android.application"
   id "kotlin-android"
   id "dev.flutter.flutter-gradle-plugin"
   id "com.google.gms.google-services"  // Google Services plugin
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Update this to use keystore.properties which was visible in your project structure
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('keystore.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    // Try alternate filename
    keystorePropertiesFile = rootProject.file('key.properties')
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } else {
        println "No keystore properties file found. Will try to use debug signing."
    }
}

// Add Mapbox repository
repositories {
    google()
    mavenCentral()
    maven {
        url 'https://api.mapbox.com/downloads/v2/releases/maven'
        authentication {
            basic(BasicAuthentication)
        }
        credentials {
            username = "mapbox"
            password = project.hasProperty('MAPBOX_DOWNLOADS_TOKEN') ? project.property('MAPBOX_DOWNLOADS_TOKEN') : System.getenv('MAPBOX_DOWNLOADS_TOKEN')
        }
    }
}

android {
    namespace "com.mycompany.uptimefleet"
    compileSdkVersion 34
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId "com.mycompany.uptimefleet"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

   signingConfigs {
       debug {
           // Default debug config
       }
       release {
           if (keystoreProperties.containsKey('storeFile') && 
               keystoreProperties.containsKey('storePassword') && 
               keystoreProperties.containsKey('keyAlias') && 
               keystoreProperties.containsKey('keyPassword')) {
               
               storeFile file(keystoreProperties['storeFile'])
               storePassword keystoreProperties['storePassword']
               keyAlias keystoreProperties['keyAlias']
               keyPassword keystoreProperties['keyPassword']
           } else {
               // If no keystore properties found, use debug signing
               println "Warning: Using debug signing for release build"
               signingConfig signingConfigs.debug
           }
       }
    }

    buildTypes {
        release {
            // Check if keystore is properly configured
            if (keystoreProperties.containsKey('storeFile') && 
                keystoreProperties.containsKey('storePassword') && 
                keystoreProperties.containsKey('keyAlias') && 
                keystoreProperties.containsKey('keyPassword')) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    
    // Add this to handle duplicate classes
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        // For duplicate Kotlin classes
        pickFirst 'META-INF/kotlinx-serialization-core.kotlin_module'
        pickFirst 'META-INF/kotlinx-serialization-json.kotlin_module'
        // Handle duplicate Mapbox classes by picking the newer version
        pickFirst '**/com/mapbox/android/core/**'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0"
    implementation platform("org.jetbrains.kotlin:kotlin-bom:1.8.0")
    
    // Use only the mapbox-navigation SDK which should include all dependencies
    implementation 'com.mapbox.navigation:android:2.10.0'
    
    // Add multidex support
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Add Google Play services
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'androidx.appcompat:appcompat:1.3.1'
}

// Only force the common module version
configurations.all {
    resolutionStrategy {
        force 'com.mapbox.common:common:23.8.0'
    }
}